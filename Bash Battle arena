Level 2: Variables and Loops
#!/bin/bash

for i in $(seq 1 10)
# for i in {1..10}
do
    echo "Number: $i"
done

Level 3: Conditional Statements
# Check if the file exists
if [[ ! -e "/home/hasnat/Arena/hero.txt" ]]; then
#if [ -f "Arena/hero.txt" ]; then
# echo "Hero found!"
    echo "Hero missing."
else
    echo "Hero found!"
fi

#if [ -f "Arena/hero.txt" ]; then: Checks if the file hero.txt exists.

Level 4: File Manipulation
#!/bin/bash

# Source and destination directories
SOURCE_DIR="/home/hasnat/Arena"
DEST_DIR="/home/hasnat/Backup"

# Check if the source directory exists
if [ ! -d "$SOURCE_DIR" ]; then
    echo "Source directory does not exist: $SOURCE_DIR"
    exit 1
fi

# Check if the destination directory exists; if not, create it
if [ ! -d "$DEST_DIR" ]; then
    echo "Destination directory does not exist. Creating: $DEST_DIR"
    mkdir -p "$DEST_DIR"
fi

# Copy all .txt files from source to destination
cp "$SOURCE_DIR"/*.txt "$DEST_DIR"

echo "All .txt files copied from $SOURCE_DIR to $DEST_DIR."

Actual solution
#!/bin/bash

mkdir -p Backup
cp Arena/*.txt Backup/
#cp Arena/*.txt Backup/: Copies all .txt files (uses * wildcard) from Arena to Backup.


Level 5: Boss Battle 1 - Combining Basics
#!/bin/bash

# Check if the source directory exists
if [ ! -d "/home/hasnat/Battlefield" -o  "/home/hasnat/Archive" ]; then
    mkdir -p "/home/hasnat/Archive" "/home/hasnat/Battlefield"
fi

touch "/home/hasnat/Battlefield/knight.txt"

touch "/home/hasnat/Battlefield/sorcerer.txt"

touch "/home/hasnat/Battlefield/rogue.txt"

#touch Battlefield/knight.txt Battlefield/sorcerer.txt Battlefield/rogue.txt
#can do all 3 in a single line 

# Check if the file exists
if [ -e "/home/hasnat/Battlefield/knight.txt" ]; then
    echo "Knight has been found"

# move Knight from Battlefield to Archive
    mv "/home/hasnat/Battlefield/knight.txt" "/home/hasnat/Archive/"
    echo "Knight has been killed"
# List contents of Battlefield & Archive folder
    echo "Contents of Battlefield:"
    ls "/home/hasnat/Battlefield/"
    
    echo "Contents of Archive:"
    ls "/home/hasnat/Archive/"

else
    echo "Knight is dead"
    exit 1

fi

Level 6: Argument Parsing
#!/bin/bash

count_lines(){
local filename="$1"
# Check if a filename is provided as an argument
if [[ -z "$1" ]]; then
    echo "No file provided."
    exit 1
fi
# Check if the file exists
if [[ ! -e "/home/hasnat/$filename" ]]; then
    echo "File '$filename' does not exist."
    exit 1
fi
# Count the number of lines in the file
line_count=$(wc -l < "/home/hasnat/$filename")

# Print the number of lines
echo "Number of lines in $filename: $line_count"
}

count_lines "read.txt"


Level 7 : File sorting
#!/bin/bash


DIRECTORY="/home/hasnat/Arena"

if [ ! -d "$DIRECTORY" ]; then
    echo "Directory does not exist."
    exit 1
fi

find "$DIRECTORY" -type f -name "*.txt" -exec ls -lh {} + | sort -k 5,5 -h | awk '{ print $5, $9 }'

Level 8: Multi-File Searcher
#!/bin/bash

DIRECTORY="Arena"
SEARCH_TERM="Error"

if [ ! -d "$DIRECTORY" ]; then
    echo "Directory does not exist."
    exit 1
fi
# grep -l "$SEARCH_TERM" "$DIRECTORY"/*.log searches for the term in each .log file and lists the filenames that contain the term.

grep -l "$SEARCH_TERM" "$DIRECTORY"/*.log



Level 9: Script to Monitor Directory Changes
#!/bin/bash
set -x
DIRECTORY="Arena"
LOG_FILE="change_log.txt"

if [ ! -d "$DIRECTORY" ]; then
    echo "Directory does not exist."
    exit 1
fi

fswatch -r $DIRECTORY | while read change; do
    if [ -e "$change" ]; then
        echo "Change detected: $(date +'%Y-%m-%d %H:%M:%S') File modified/created: $change" >> "$LOG_FILE"
    else
        echo "$(date +'%Y-%m-%d %H:%M:%S') File deleted: $change" >> "$LOG_FILE"
    fi
done


Level 10: Boss Battle 2 - Intermediate Scripting
#!/bin/bash
# Create directories if they dont exist and touch files in Arena_Boss directory
mkdir -p Arena_Boss
mkdir -p Victory_Archive
cd Arena_Boss
touch file1.txt file2.txt file3.txt file4.txt file5.txt
cd ..

DIR="Arena_Boss"
# For loop: For each file in this directory, generate random number of lines between 10-20 
for file in "$DIR"/*; do
    if [[ -f "$file" ]]; then
        LINES=$(( RANDOM % 11 + 10 )) 
        > "$file" # clear the file first
        for (( i=1; i<=LINES; i++ )); do
            echo "This is $i lines of $LINES in file $(basename "$file")" >> "$file"
        done

        echo "Generated "$LINES" lines in $(basename "$file")"
    fi
done

echo "Victory" >> Arena_Boss/file1.txt
# sort the files by size
find "$DIR" -type f -exec ls -lh {} + | sort -k 5,5 -h | awk '{ print $5, $9 }'

for file in "$DIR"/*; do
    if grep -l "Victory" "$file"; then   #search for the word victory in a file and move it to another folder
        mv "$file" "Victory_Archive"
        echo "$file contains 'Victory' and has been moved to Victory_Archive."
    fi
done

Level 11: Automated Disk Space Report
#!/bin/bash

DIRECTORY="Arena"
THRESHOLD=1

USAGE=$(du -sm "$DIRECTORY" | awk '{print $1}')

if [ "$USAGE" -gt "$THRESHOLD" ]; then
    echo "Warning: Disk usage for $DIRECTORY is at $USAGE%!"
else
    echo "Disk usage for $DIRECTORY is at $USAGE%. All is well."
fi


Level 12: Simple Configuration File Parser
#!/bin/bash

CONFIG_FILE="settings.conf"

if [ ! -f "$CONFIG_FILE" ]; then
    echo "Configuration file does not exist."
    exit 1
fi

while IFS='=' read -r key value; do
    echo "Key: $key, Value: $value"
done < "$CONFIG_FILE
# IFS='=' sets the internal field separator to = - splitting when it sees equal
# The script reads each line of the configuration file, splits it into key and value, and prints them.



Level 13: Backup Script with Rotation
#!/bin/bash

SOURCE_DIR="Arena"
BACKUP_DIR="Backups"

mkdir -p "$BACKUP_DIR"

TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
BACKUP_NAME="backup_$TIMESTAMP.tar.gz"
tar -czf "$BACKUP_DIR/$BACKUP_NAME" "$SOURCE_DIR"
echo "Created backup: $BACKUP_NAME"

cd "$BACKUP_DIR" || exit
ls -t | sed -e '1,5d' | while IFS= read -r file; do
    rm -f "$file"
done
# tar -czf "$BACKUP_DIR/$BACKUP_NAME" "$SOURCE_DIR" creates a compressed backup. 
# ls -t | sed -e '1,5d': This lists the files in the backup directory, sorted by modification time, and removes the first 5 lines from the output, which are the most recent files.
# while IFS= read -r file; do rm -f "$file"; done: This loop safely reads each file name (handling spaces or newlines) and deletes the files.

Level 14: User-Friendly Menu Script

#!/bin/bash

echo "Choose an option:"
echo "1. Check disk space"
echo "2. Show system uptime"
echo "3. List users"

read -rp "Enter your choice [1-3]: " choice

case $choice in
    1) df -h ;;
    2) uptime ;;
    3) cut -d: -f1 /etc/passwd ;;
    *) echo "Invalid option" ;;
esac
# The script presents a menu and reads the user's choice. 
# case matches the user's input to the corresponding command.

Level 15: Boss Battle 3 - Advanced Scripting

#!/bin/bash

echo "Choose an option:"
echo "1. Check disk space"
echo "2. Show system uptime"
echo "3. Backup Arena directory"
echo "4. Parse configuration file"

read -rp "Enter your choice [1-4]: " choice


case $choice in
    1)
        df -h
        ;;
    2)
        uptime
        ;;
    3)
        SOURCE_DIR="Arena"
        BACKUP_DIR="Backups"

        mkdir -p "$BACKUP_DIR"

        TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
        BACKUP_NAME="backup_$TIMESTAMP.tar.gz"
        tar -czf "$BACKUP_DIR/$BACKUP_NAME" "$SOURCE_DIR"
        echo "Created backup: $BACKUP_NAME"

        cd "$BACKUP_DIR" || exit
        ls -t | sed -e '1,5d' | while IFS= read -r file; do
            rm -f "$file"
        done
        ;;
    4)
        CONFIG_FILE="settings.conf"
        if [ ! -f "$CONFIG_FILE" ]; then
            echo "Configuration file does not exist."
            exit 1
        fi
        while IFS='=' read -r key value; do
            echo "Key: $key, Value: $value"
        done < "$CONFIG_FILE"
        ;;
    *)
        echo "Invalid option"
        ;;
esac

# This Boss Battle combines conditional logic, file operations, menu systems, and backup management into a comprehensive script.
# Challenge reinforces the key concepts you learned in Levels 11-14, testing your ability to integrate these concepts into a single, functional script.
